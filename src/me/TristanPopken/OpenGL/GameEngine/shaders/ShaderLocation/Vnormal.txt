#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;
in vec3 tangent;

out vec2 pass_textureCoords;
out vec3 toLightVector;
out vec3 toCameraVector;
out float vFragDepth;
out vec3 surfaceNormal;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform vec3 cameraPos;

float dist(vec3 a, vec4 b) {
	return sqrt(pow(a.x-b.x,2)+pow(a.y-b.y,2)+pow(a.z-b.z,2));
}

void main(void) {
	
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	mat4 modelViewMatrix = viewMatrix * transformationMatrix;
	vec4 positionRelativeToCam = modelViewMatrix * vec4(position, 1.0);
	gl_Position = projectionMatrix * positionRelativeToCam;
	
	pass_textureCoords = textureCoords;
	
	vec3 surfaceNormal = (modelViewMatrix * vec4(normal, 0.0)).xyz;
	
	vec3 norm = normalize(surfaceNormal);
	vec3 tang = normalize((modelViewMatrix * vec4(tangent, 0.0)).xyz);
	vec3 bitang = normalize(cross(norm, tang));
	
	mat3 toTangentSpace = mat3(
		tang.x, bitang.x, norm.x,
		tang.y, bitang.y, norm.y,
		tang.z, bitang.z, norm.z
	);
	
	toLightVector = normalize(lightPosition);//toTangentSpace * (lightPosition - positionRelativeToCam.xyz);
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;//toTangentSpace * (-positionRelativeToCam.xyz);
	surfaceNormal = normal;
	
	vFragDepth = 1.0 + dist(cameraPos, worldPosition);
}