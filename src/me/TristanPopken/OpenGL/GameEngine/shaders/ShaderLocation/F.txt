#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float vFragDepth;

out vec4 out_Color;

uniform sampler2D ts;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

const float FAR = 100000;
const float logDepthBufFC = 1.0 / log(FAR + 1.0) * (log(2)/log(2.71828182846));

void main(void) {
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = -normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.2f);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	out_Color = vec4(diffuse, 1.0) * texture(ts, pass_textureCoords) + vec4(lightColour * finalSpecular, 1.0);
	
	gl_FragDepth = log2(vFragDepth) * logDepthBufFC;
}

